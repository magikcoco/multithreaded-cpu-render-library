#ifndef WINDOWING_H
#define WINDOWING_H

#include <stdbool.h>
#include <X11/Xlib.h> // X window functions
#include "png_image.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////// SHUTDOWN /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Raises a signal for termination request
 */
void shutdown();

/*
 * Returns the shutdown flag
 */
bool is_gui_shutdown();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////// WINDOW CONFIGURATION //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Sets the X location attribute for the window
 */
void set_window_x(int set_x);

/*
 * Sets the Y location attribute for the window
 */
void set_window_y(int set_y);

/*
 * Sets the width location attribute for the window
 */
void set_window_width(int set_width);

/*
 * Sets the height location attribute for the window
 */
void set_window_height(int set_height);

/*
 * Sets the border width location attribute for the window
 */
void set_window_border_width(int set_border);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////// IMAGE UPDATE ///////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Updates the image which is displayed in the window
 */
void update_image(PNG_Image* newImage);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////// SCALING //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Returns true if nearest neighbor scaling is in use, false otherwise
 */
bool get_scaling_nn();

/*
 * Returns true if bilinear interpolation scaling is in use, false otherwise
 */
bool get_scaling_bli();

/*
 * Sets the scaling algorithm to nearest neighbor scaling
 */
void set_scaling_nn();

/*
 * Sets the scaling algorithm to nearest bilinear interpolation
 */
void set_scaling_bli();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////// EVENT HANDLING ///////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Define KeyHandler as a function pointer type
 */
typedef void (*KeyHandler)(void);

/*
 * Define MouseClickHandler as a function pointer type
 */
typedef void (*MouseClickHandler)(void);

/*
 * Define KeyCode as an alias for unsigned int
 */ 
typedef unsigned int KeyMap;

/*
 * Define KeyCode as an alias for unsigned int
 */ 
typedef unsigned int MouseButton;

/*
 * Sets a given KeyHandler (function pointer) to execute when the given key is pressed
 */
void handle_key_event(KeyHandler handler, KeySym key);

/*
 * Removes the event handler for the key specified
 */
void remove_key_handler(KeySym key);

void handle_mouse_click(MouseClickHandler handler, MouseButton button);

/*
 * Modifies the given pointers X and Y to the most recently known position of the mouse
 * Returns 0 if successful or -1 otherwise
 */
int get_mouse_position(int *x, int *y);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////// STARTUP /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Starts the gui in its own thread
 */
void start_gui();

#endif // WINDOWING_H
